# Pr√°ctico 11: Recursividad
# Alumno: Angel Fernando TORRES

# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, 
# utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos 
# los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
# Main
userInput = int(input("Ingrese un n√∫mero entero positivo: "))
print(f"El factorial de {userInput} es: {factorial(userInput)}")

# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci 
# en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la 
# posici√≥n que el usuario especifique.
def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
# Main
userInput = int(input("Ingrese la posici√≥n en la serie de Fibonacci: "))
print(f"Serie de Fibonacci hasta la posici√≥n {userInput}: ")
for (userInput) in range(userInput + 1):
    print(f"Posici√≥n {userInput}:", fibonacci(userInput))

# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base 
# elevado a un exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1).
def potencia(base, exponente):
    if exponente == 0:
        return 1
    return base * potencia(base, exponente - 1)

# Main
userInputBase = int(input("Ingrese la base: "))
userInputExponente = int(input("Ingrese el exponente: "))
print("Resultado: ", potencia(userInputBase, userInputExponente))

# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero 
# positivo en base decimal y devuelva su representaci√≥n en binario como una 
# cadena de texto.
def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)
# Main
userInput = int(input("Ingrese un n√∫mero entero positivo en base decimal: "))
if userInput == 0:
    print("El n√∫mero en binario es 0")
else:
    print(f"El n√∫mero en binario es: {decimal_a_binario(userInput)}")

# 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
# cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False
# si no lo es. Requisitos: La soluci√≥n debe ser recursiva. 
# No se debe usar [::-1] ni la funci√≥n reversed().
def es_palindromo(palabra):
    # Caso base: si la palabra tiene 0 o 1 caracteres, es un pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Compara el primer y √∫ltimo car√°cter
    if palabra[0] != palabra[-1]:
        return False
    # Llama recursivamente a la subcadena sin los extremos
    return es_palindromo(palabra[1:-1])
# Main
userInput = input("Ingrese una palabra (sin espacios ni tildes): ").lower()
if es_palindromo(userInput):
    print(f"La palabra '{userInput}' es un pal√≠ndromo.")
else:
    print(f"La palabra '{userInput}' no es un pal√≠ndromo.")

# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
# n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
# Restricciones:
# No se puede convertir el n√∫mero a string.
# Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
def suma_digitos(n):
    if n == 0:
        return 0
    else:
        return n % 10 + suma_digitos(n // 10)
# Main
userInput = int(input("Ingrese un n√∫mero entero positivo: "))
print("La suma de los d√≠gitos de es: ", suma_digitos(userInput))

# 7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo 
# coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente 
# hasta llegar al √∫ltimo nivel con un solo bloque.
# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques 
# en el nivel m√°s bajo y devuelva el total de bloques que necesita para 
# construir toda la pir√°mide.
def contar_bloques(n):
    if n == 0:
        return 0
    else:
        return n + contar_bloques(n - 1)
# Main
userInput = int(input("Ingrese el n√∫mero de bloques en el nivel m√°s bajo: "))
print("Se necesitan estos bloques: ", contar_bloques(userInput))

# 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que 
# reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y 
# devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
def contar_digito(numero, digito):
    if numero == 0:
        return 0
    ultimo_digito = numero % 10
    if ultimo_digito == digito:
        return 1 + contar_digito(numero // 10, digito)
    else:
        return contar_digito(numero // 10, digito)
# Main
userInputNumero = int(input("Ingrese un n√∫mero entero positivo: "))
userInputDigito = int(input("Ingrese un d√≠gito (0-9): "))
if 0 <= userInputDigito <= 9:
    resultado = contar_digito(userInputNumero, userInputDigito)
    print(f"El d√≠gito {userInputDigito} aparece {resultado} vez/veces en el n√∫mero {userInputNumero}.")